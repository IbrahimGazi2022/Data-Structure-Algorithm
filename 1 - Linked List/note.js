// Unshift মেথডের কাজের ধাপ:
// নতুন নোড তৈরি করা:
// একটি নতুন নোড তৈরি করা হয় যা ব্যবহারকারীর দেয়া ডেটা সংরক্ষণ করবে।

// লিস্ট ফাঁকা কিনা চেক করা:

// যদি লিস্টটি ফাঁকা (head = null) থাকে, নতুন নোডটিকেই head এবং tail হিসেবে সেট করা হয়।
// কারণ, ফাঁকা লিস্টে প্রথম নোডই হবে প্রথম এবং শেষ।
// লিস্টে নোড থাকলে:

// নতুন নোডের next প্রপার্টি বর্তমান head এর দিকে পয়েন্ট করে।
// তারপর নতুন নোডটিকে head হিসেবে সেট করা হয়।
// দৈর্ঘ্য বৃদ্ধি:
// লিঙ্কড লিস্টের দৈর্ঘ্য (length) ১ বাড়ানো হয়।

// লিস্ট রিটার্ন করা:
// পুরো লিঙ্কড লিস্ট রিটার্ন করা হয় যেন এটি আরও প্রসেসিং বা ডিবাগিংয়ে কাজে লাগে।


class Node { 
    constructor(value) { 
        this.value = value; // নোডের ডেটা ভ্যালু সংরক্ষণ করে
        this.next = null;   // পরবর্তী নোডের রেফারেন্স শুরুতে null থাকে
    }
}

class LinkedList { 
    constructor(value) { 
        const newNode = new Node(value); // নতুন একটি নোড তৈরি করা
        this.head = newNode;  // এই নোডটিকে লিস্টের শুরু (head) হিসেবে সেট করা
        this.tail = this.head; // শুরুতে head এবং tail একই নোডে পয়েন্ট করে
        this.length = 1; // লিস্টের দৈর্ঘ্য শুরুতে ১ সেট করা
    }

    unshit(value) { // লিস্টের শুরুতে নতুন নোড যোগ করার জন্য মেথড
        const newNode = new Node(value); // নতুন একটি নোড তৈরি করা
        if (!this.head) { // যদি লিস্ট ফাঁকা থাকে
            this.head = newNode; // নতুন নোডটিকে head সেট করা
            this.tail = this.head; // একই নোডটিকে tail হিসেবে সেট করা
        } else { 
            newNode.next = this.head; // নতুন নোডের next প্রপার্টি বর্তমান head এর দিকে নির্দেশ করবে
            this.head = newNode; // নতুন নোডটিকে head হিসেবে সেট করা
        }
        this.length++; // লিস্টের দৈর্ঘ্য ১ বাড়ানো
        return this; // সম্পূর্ণ লিস্ট রিটার্ন করা
    }
}

let myLinkedList = new LinkedList(10); // নতুন একটি LinkedList তৈরি করা, প্রথম নোডের ভ্যালু ১০
myLinkedList.unshit(5); // লিস্টের শুরুতে একটি নতুন নোড যোগ করা, যার ভ্যালু ৫
console.log(myLinkedList); // লিস্টটি কনসোলে প্রিন্ট করা
