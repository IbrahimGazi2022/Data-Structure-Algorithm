// insert() ‡¶Æ‡ßá‡¶•‡¶°‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π
// -----------------------------

// ‡ßß - ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‚Üí ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡ß¶-‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ‡•§
// 2 - ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‚Üí ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡ß¶ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá unshift(value) ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶®‡ßã‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡•§
// 3 - ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‚Üí ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá push(value) ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßá‡¶∑‡ßá ‡¶®‡ßã‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡•§
// 4 - ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ‡¶ø‡¶§ ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‚Üí


class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    constructor(value) {
        const newNode = new Node(value);
        this.head = newNode;
        this.tail = this.head;
        this.length = 1;
    }

    push(value) {
        const newNode = new Node(value);
        if (!this.head) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }

    unshift(value) {
        const newNode = new Node(value);
        newNode.next = this.head;
        this.head = newNode;
        this.length++;
        return this;
    }

    insert(index, value) {
        if (index < 0 || index > this.length) return false;
        if (index === 0) return this.unshift(value);
        if (index === this.length) return this.push(value);

        let temp = this.head;
        for (let i = 0; i < index - 1; i++) {
            temp = temp.next;
        }

        const newNode = new Node(value);
        newNode.next = temp.next;
        temp.next = newNode;
        this.length++;
        return true;
    }
}

// ‚úÖ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ï
let myLinkedList = new LinkedList(10);
myLinkedList.push(20);
myLinkedList.push(30);

myLinkedList.insert(1, 15); // üîπ ‡ßß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏‡ßá `15` ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶¨‡ßá
console.log(myLinkedList);

